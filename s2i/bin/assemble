#!/bin/bash

set -e

# restore maven dependencies downloaded in a previous build,
# so they do not have to be downloaded again.
# /opt/s2i/destination/artifacts will only be present in the incremental build scenario
# in which the target image name is an existing docker image which contains
# dependencies from a prior build execution.
function restore_saved_artifacts() {
  if [ "$(ls -A /opt/s2i/destination/artifacts/ 2>/dev/null)" ]; then
    echo -n "Restoring saved artifacts from prior build..."
    mv /opt/s2i/destination/artifacts/* /opt/s2i/destination/artifacts/.[!.]* $HOME/.
  fi
}

#restore_saved_artifacts


echo "---> Installing application sourcein $(pwd) with path to pom.xml being $PATH2POM "
cp -Rf /tmp/src/. ./
if [ -n "$PATH2POM" ];
 then
   echo "path to pom.xml is set to $PATH2POM";
   cd ./$PATH2POM;
 else 
   echo "path to pom.xml is not set -- defaulting to root directory of source";
fi

MAVEN_OPTS=""
if [ "$SKIP_TESTS" == "true" ];
  then
    echo "Skipping tests in maven build..";
    MAVEN_OPTS=" -DskipTests "
  else
    echo "Will run Unit Tests in maven build..";
fi

echo "---> Building Spring Boot application from source"

#Spring Boot projects often come with a mvnw wrapper, but if the environment is not setup with Maven correctly,
#we can get a Error: Could not find or load main class org.apache.maven.wrapper.MavenWrapperMain 
#commenting this out, but leaving the code in case future versions will address this
#if [ -f "mvnw" ]; then
#  ./mvnw clean install
#else
  mvn clean install
#fi

# Fix source directory permissions
fix-permissions ./
